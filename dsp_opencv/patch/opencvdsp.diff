Index: opencv/modules/core/src/alloc.cpp
===================================================================
--- opencv/modules/core/src/alloc.cpp	(revision 1)
+++ opencv/modules/core/src/alloc.cpp	(revision 3)
@@ -41,9 +41,12 @@
 //M*/
 
 #include "precomp.hpp"
+#include <cmem.h>
 
 #define CV_USE_SYSTEM_MALLOC 1
+#define ALIGN 8
 
+CMEM_AllocParams CMEM_DEFAULT_PARAMS = {CMEM_HEAP , CMEM_CACHED , ALIGN };
 namespace cv
 {
 
@@ -59,22 +62,39 @@
 
 void* fastMalloc( size_t size )
 {
-    uchar* udata = (uchar*)malloc(size + sizeof(void*) + CV_MALLOC_ALIGN);
+/*
+    uchar* udata = (uchar*)malloc(size + sizeof(void*) + CV_MALLOC_ALIGN); 
     if(!udata)
         return OutOfMemoryError(size);
     uchar** adata = alignPtr((uchar**)udata + 1, CV_MALLOC_ALIGN);
     adata[-1] = udata;
     return adata;
+*/  
+    CMEM_init();
+    uchar *udata = (uchar*)CMEM_alloc(size + sizeof(void*) + CV_MALLOC_ALIGN, &CMEM_DEFAULT_PARAMS);
+    if(!udata)
+        return OutOfMemoryError(size);
+    uchar** adata = alignPtr((uchar**)udata + 1, CV_MALLOC_ALIGN);
+    adata[-1] = udata;
+    return adata;
+ 
 }
     
-void fastFree(void* ptr)
+void fastFree(void* ptr) 
 {
-    if(ptr)
+   if(ptr)
     {
+/*
         uchar* udata = ((uchar**)ptr)[-1];
         CV_DbgAssert(udata < (uchar*)ptr &&
                ((uchar*)ptr - udata) <= (ptrdiff_t)(sizeof(void*)+CV_MALLOC_ALIGN)); 
         free(udata);
+*/
+	uchar* udata = ((uchar**)ptr)[-1];
+        CV_DbgAssert(udata < (uchar*)ptr &&
+               ((uchar*)ptr - udata) <= (ptrdiff_t)(sizeof(void*)+CV_MALLOC_ALIGN)); 
+        CMEM_free(udata, &CMEM_DEFAULT_PARAMS);
+	
     }
 }
 
